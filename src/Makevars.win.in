TARGET = $(subst 64,x86_64,$(subst 32,i686,$(WIN)))-pc-windows-gnu

TARGET_DIR = ./rcounter/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/@LIBDIR@
STATLIB = $(LIBDIR)/librcounter.a
PKG_LIBS = -L$(LIBDIR) -lrcounter -lws2_32 -ladvapi32 -luserenv -lbcrypt -lntdll

all: $(SHLIB) rust_clean

.PHONY: $(STATLIB)

$(SHLIB): $(STATLIB)

CARGOTMP = $(CURDIR)/.cargo
VENDOR_DIR = $(CURDIR)/vendor

$(STATLIB):
	mkdir -p $(TARGET_DIR)/libgcc_mock
	touch $(TARGET_DIR)/libgcc_mock/libgcc_eh.a

	# Check if NOT_CRAN is false and unpack vendor if so
	ifeq ($(NOT_CRAN),false)
	if exist rcounter\\vendor.tar.xz (
		powershell -Command "tar -xf rcounter/vendor.tar.xz"
		mkdir "$(CARGOTMP)"
		copy rcounter\\vendor-config.toml "$(CARGOTMP)\\config.toml"
	)
	endif


	export CARGO_HOME=$(CARGOTMP) && \
	export LIBRARY_PATH="$(LIBRARY_PATH);$(CURDIR)/$(TARGET_DIR)/libgcc_mock" && \
	RUSTFLAGS="$(RUSTFLAGS) --print=native-static-libs" cargo build @CRAN_FLAGS@ --target=$(TARGET) --lib @PROFILE@ --manifest-path=rcounter/Cargo.toml --target-dir=$(TARGET_DIR)

	rm -Rf $(CARGOTMP)

rust_clean: $(SHLIB)
	rm -Rf $(CARGOTMP) $(VENDOR_DIR) @CLEAN_TARGET@

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) $(TARGET_DIR) $(VENDOR_DIR)
